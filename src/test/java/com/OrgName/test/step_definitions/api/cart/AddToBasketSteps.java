package com.salmon.test.step_definitions.api.cart;


import com.jayway.restassured.response.Response;
import com.salmon.test.enums.DatabaseQueries;
import com.salmon.test.enums.Store;
import com.salmon.test.enums.UserType;
import com.salmon.test.framework.helpers.DatabaseHelper;
import com.salmon.test.framework.helpers.UrlBuilder;
import com.salmon.test.models.api.cart.response.AddToCartResponseModel;
import com.salmon.test.models.api.cart.request.OrderItemRequestModel;
import com.salmon.test.models.database.OrdersDBModel;
import com.salmon.test.services.Tokens;
import com.salmon.test.services.cart.CartService;
import com.salmon.test.step_definitions.api.loginhelper.LoginHelper;
import cucumber.api.java.en.And;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import org.apache.commons.lang3.text.StrSubstitutor;
import org.apache.http.HttpStatus;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import java.util.stream.Stream;

import static com.salmon.test.framework.helpers.ApiHelper.gson;
import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.testng.AssertJUnit.assertTrue;

//TODO : this class needs lot of refactoring as per the coming up stories
public class AddToBasketSteps {

    private static org.slf4j.Logger LOG = LoggerFactory.getLogger(AddToBasketSteps.class);

    String userId;
    private Store currentStoreIdentifier;
    private Response identityResponse;
    private Response addToCartResponse;
    private Response newAddToCartResponse;
    private AddToCartResponseModel addToCartResponseModel;
    private AddToCartResponseModel newAddToCartResponseModel;
    private BiFunction<Optional<List<OrderItemRequestModel>>, Store, Response> basket1 = CartService::addToBasket;
    private BiFunction<String, String, Response> basket2 = CartService::addToBasket;

    public AddToBasketSteps() {
        this.currentStoreIdentifier = Store.valueOf(Optional.ofNullable(System.getProperty("currentStore"))
                                                            .orElse(Store.Moncler_GB.name()));
        LOG.info("basket is initialized for store -> " + currentStoreIdentifier.name());
    }

    @Given("^A user is on the site as a guest user$")
    public void userIsOnTheSiteAsAGuestUser() throws Throwable {
        this.identityResponse = new LoginHelper().login(UserType.guest, this.currentStoreIdentifier);
        this.userId = identityResponse.body().jsonPath().get("userId");
        Tokens.WCToken = identityResponse.body().jsonPath().get("WCToken");
        Tokens.WCTrustedToken = identityResponse.body().jsonPath().get("WCTrustedToken");

        assertThat(Tokens.WCToken != null && Tokens.WCTrustedToken != null && userId != null);
    }

    @And("^A guest user token is generated by guest identity service for the store \"([^\"]*)\"$")
    public void aGuestUserTokenIsGeneratedByGuestIdentityServiceForTheStore(Store storeIdentifier) throws Throwable {
        this.currentStoreIdentifier = storeIdentifier;
        userIsOnTheSiteAsAGuestUser();
    }

    @Given("^A guest user token is generated by guest identity service$")
    public void asAGuestUserTokenGeneratedByGuestIdentityService() throws Throwable {
        aGuestUserTokenIsGeneratedByGuestIdentityServiceForTheStore(currentStoreIdentifier);
    }

//    ===================================== new approach

    @And("^verify order entry is NOT created for this user in ORDERS table$")
    public void orderEntryForTheGivenUser() throws Throwable {
        assertThat(getOrdersFromDB(this.userId)).hasSize(0);
    }

    @When("^below json message is POST'ed onto the API end point ([^\"]*)$")
    public void belowJsonMessageWithAndIsPOSTEdOntoTheAPIEndPoint(String uri, String payload) throws Throwable {
        addToCartResponse = basket2.apply(parsePayload(payload), uri.replace("{storeId}", currentStoreIdentifier.name()));
        System.out.println("cart addToCartResponse=" + addToCartResponse.asString());
    }

    private String parsePayload(String payload) {
        return Stream.of(payload)
                .filter(p1 -> p1.contains("<partNumber"))
                .findAny()
                .map(p ->
                 "store."
                         .concat(currentStoreIdentifier.name())
                         .concat(".")
                         .concat(p.split("<")[1].split(">")[0]))
                .map(p -> UrlBuilder.readValueFromConfig(p))
                .map(p -> payload.replaceAll("<partNumber.*>", p))
                .orElse(payload);
    }

    @Then("^the order is (.*) created successfully$")
    public void theOrderIsCreatedSuccessfully(String yesOrNot) throws Throwable {
        if ("NOT".equalsIgnoreCase(yesOrNot)) {
//            assertThat(supplier.get().count()).isEqualTo(0); TODO
        } else {
            assertThat(addToCartResponse.getStatusCode()).isEqualTo(HttpStatus.SC_CREATED);
            addToCartResponseModel = gson().fromJson(addToCartResponse.asString(), AddToCartResponseModel.class);
            assertThat(addToCartResponseModel).isNotNull();
        }
    }

    @Then("^the order item is successfully added to the already existed cart$")
    public void theOrderItemIsSuccessfullyAddedToTheExistedCart() throws Throwable {
            assertThat(newAddToCartResponse.getStatusCode()).isEqualTo(HttpStatus.SC_CREATED);
            newAddToCartResponseModel = gson().fromJson(newAddToCartResponse.asString(), AddToCartResponseModel.class);
            assertThat(newAddToCartResponseModel).isNotNull();
    }


    @Then("^a new order entry is (.*) created for this user in the ORDERS table$")
    public void aNewOrderEntryIsCreatedForThisUserInTheORDERSTable(String yesOrNoT) throws Throwable {
        List<OrdersDBModel> ordersFromDB = getOrdersFromDB(this.userId);

        if ("NOT".equalsIgnoreCase(yesOrNoT)) {
            assertThat(ordersFromDB.size()).isEqualTo(0);
        } else {
            assertThat(ordersFromDB.size()).isEqualTo(1);
            assertThat(ordersFromDB.get(0).getORDERS_ID()).isEqualTo(addToCartResponseModel.getOrderId());
            assertThat(ordersFromDB.get(0).getORDERITEMS_ID()).isEqualTo(addToCartResponseModel.getOrderItem().get(0).orderItemId);
        }
    }

    @Then("^the response should have HTTP status code (\\d+)$")
    public void theResponseShouldHaveTheHTTPStatusCode(int statusCode) throws Throwable {
        assertThat(addToCartResponse.getStatusCode()).isEqualTo(statusCode);
    }

    @And("^the response message body should be as below$")
    public void theResponseMessageBodyShouldBeAsBelow(final String responseExpected) throws Throwable {
        Map<String, String> template = new HashMap();
        template.put("orderItemId", addToCartResponseModel.getOrderItem().get(0).orderItemId);
        template.put("orderId", addToCartResponseModel.getOrderId());
        StrSubstitutor sub = new StrSubstitutor(template);
        String resolvedResponse = sub.replace(responseExpected);

        AddToCartResponseModel expectedResponse = gson().fromJson(resolvedResponse, AddToCartResponseModel.class);

        assertThat(expectedResponse.getOrderId()).isEqualTo(addToCartResponseModel.getOrderId());
        assertThat(expectedResponse.getOrderItem().get(0).orderItemId).isEqualTo(addToCartResponseModel.getOrderItem().get(0).orderItemId);

//        assertThat(resolvedResponse.replace("\r\n", "").replace(" ", "").trim().toString()).isEqualTo(addToCartResponse.asString().replace("\r\n", "").replace(" ", "").trim());
    }


    @When("^below SKU's are added to cart one at a time$")
    public void belowSKUSAreAddedToCartOneAtATime(List<OrderItemRequestModel> orderItems) throws Throwable {
        orderItems.forEach(o -> basket1.apply(Optional.ofNullable(orderItems), currentStoreIdentifier));

        List<Response> responseList = orderItems.stream()
                .map(o -> basket1.apply(Optional.ofNullable(Arrays.asList(o)), currentStoreIdentifier))
                .collect(toList());

        assertThat(addToCartResponse.getStatusCode()).isEqualTo(HttpStatus.SC_CREATED);
    }

    @When("^below SKU's are added to cart$")
    public void belowSKUSAreAddedToCart(List<OrderItemRequestModel> orderItems) throws Throwable {
        addToCartResponse = basket1.apply(Optional.ofNullable(orderItems), currentStoreIdentifier);
        assertThat(addToCartResponse.getStatusCode()).isEqualTo(HttpStatus.SC_CREATED);
    }

    @When("^below SKU's are added to the existed cart$")
    public void belowSKUSAreAddedToOldCart(List<OrderItemRequestModel> orderItems) throws Throwable {
        newAddToCartResponse = basket1.apply(Optional.of(orderItems), currentStoreIdentifier);
        assertThat(newAddToCartResponse.getStatusCode()).isEqualTo(HttpStatus.SC_CREATED);
    }


    @Then("^this SKU should be added to the already existed Order$")
    public void thisSKUShouldBeAddedToTheAlreadyExistedOrder() throws Throwable {
        assertThat(newAddToCartResponseModel.getOrderId()).isEqualTo(addToCartResponseModel.getOrderId());
        assertThat(newAddToCartResponseModel.getOrderItem().size()).isEqualTo(1);
        assertThat(newAddToCartResponseModel.getOrderItem().get(0).orderItemId).isEqualTo(addToCartResponseModel.getOrderItem().get(0).orderItemId);
    }

    @And("^the order items should have merged to the already existed Order item$")
    public void theOrderItemsShouldHaveMergedToTheAlreadyExistedOrderItem() throws Throwable {

        List<OrdersDBModel> dbOrders = getOrdersFromDB(this.userId);

        assertThat(dbOrders.size()).isEqualTo(1);

        Predicate<OrdersDBModel> p1 = o -> o.getORDERS_ID().equals(newAddToCartResponseModel.getOrderId());
        Predicate<OrdersDBModel> p2 = p1.and(o -> o.getORDERITEMS_ID().equals(newAddToCartResponseModel.getOrderItem().get(0).orderItemId))
                                        .and(o -> o.getQUANTITY().equals("4"));
        //TODO : needs refactoring
        assertTrue(dbOrders.stream()
                .filter(p2)
                .findAny()
                .isPresent());
    }

    private List<OrdersDBModel> getOrdersFromDB(String userID) {
        return DatabaseHelper.executeParamQueryToObject(OrdersDBModel.class, DatabaseQueries.GET_ORDERS_BY_USER_ID.getQuery(), userID);
    }
}
